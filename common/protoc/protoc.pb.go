// Code generated by protoc-gen-go.
// source: protoc.proto
// DO NOT EDIT!

/*
Package protoc is a generated protocol buffer package.

It is generated from these files:
	protoc.proto

It has these top-level messages:
	BaseRsp
	GroupUpReq
	MessageReq
	ServerUpReq
*/
package protoc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BaseRsp struct {
	StatusCode int64  `protobuf:"varint,1,opt,name=StatusCode,json=statusCode" json:"StatusCode,omitempty"`
	Err        string `protobuf:"bytes,2,opt,name=Err,json=err" json:"Err,omitempty"`
}

func (m *BaseRsp) Reset()                    { *m = BaseRsp{} }
func (m *BaseRsp) String() string            { return proto.CompactTextString(m) }
func (*BaseRsp) ProtoMessage()               {}
func (*BaseRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GroupUpReq struct {
	GroupId    int64  `protobuf:"varint,1,opt,name=GroupId,json=groupId" json:"GroupId,omitempty"`
	ServerAddr string `protobuf:"bytes,2,opt,name=ServerAddr,json=serverAddr" json:"ServerAddr,omitempty"`
}

func (m *GroupUpReq) Reset()                    { *m = GroupUpReq{} }
func (m *GroupUpReq) String() string            { return proto.CompactTextString(m) }
func (*GroupUpReq) ProtoMessage()               {}
func (*GroupUpReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type MessageReq struct {
	Id      int64  `protobuf:"varint,1,opt,name=Id,json=id" json:"Id,omitempty"`
	From    int64  `protobuf:"varint,2,opt,name=From,json=from" json:"From,omitempty"`
	To      int64  `protobuf:"varint,3,opt,name=To,json=to" json:"To,omitempty"`
	Content string `protobuf:"bytes,4,opt,name=Content,json=content" json:"Content,omitempty"`
	Type    string `protobuf:"bytes,5,opt,name=Type,json=type" json:"Type,omitempty"`
	GroupId int64  `protobuf:"varint,6,opt,name=GroupId,json=groupId" json:"GroupId,omitempty"`
}

func (m *MessageReq) Reset()                    { *m = MessageReq{} }
func (m *MessageReq) String() string            { return proto.CompactTextString(m) }
func (*MessageReq) ProtoMessage()               {}
func (*MessageReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ServerUpReq struct {
	ServerAddr string `protobuf:"bytes,1,opt,name=ServerAddr,json=serverAddr" json:"ServerAddr,omitempty"`
}

func (m *ServerUpReq) Reset()                    { *m = ServerUpReq{} }
func (m *ServerUpReq) String() string            { return proto.CompactTextString(m) }
func (*ServerUpReq) ProtoMessage()               {}
func (*ServerUpReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*BaseRsp)(nil), "protoc.BaseRsp")
	proto.RegisterType((*GroupUpReq)(nil), "protoc.GroupUpReq")
	proto.RegisterType((*MessageReq)(nil), "protoc.MessageReq")
	proto.RegisterType((*ServerUpReq)(nil), "protoc.ServerUpReq")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Message service

type MessageClient interface {
	Message(ctx context.Context, in *MessageReq, opts ...grpc.CallOption) (*BaseRsp, error)
}

type messageClient struct {
	cc *grpc.ClientConn
}

func NewMessageClient(cc *grpc.ClientConn) MessageClient {
	return &messageClient{cc}
}

func (c *messageClient) Message(ctx context.Context, in *MessageReq, opts ...grpc.CallOption) (*BaseRsp, error) {
	out := new(BaseRsp)
	err := grpc.Invoke(ctx, "/protoc.Message/Message", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Message service

type MessageServer interface {
	Message(context.Context, *MessageReq) (*BaseRsp, error)
}

func RegisterMessageServer(s *grpc.Server, srv MessageServer) {
	s.RegisterService(&_Message_serviceDesc, srv)
}

func _Message_Message_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).Message(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoc.Message/Message",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).Message(ctx, req.(*MessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Message_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protoc.Message",
	HandlerType: (*MessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Message",
			Handler:    _Message_Message_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

// Client API for Router service

type RouterClient interface {
	GroupUp(ctx context.Context, in *GroupUpReq, opts ...grpc.CallOption) (*BaseRsp, error)
	ServerUp(ctx context.Context, in *ServerUpReq, opts ...grpc.CallOption) (*BaseRsp, error)
	Message(ctx context.Context, in *MessageReq, opts ...grpc.CallOption) (*BaseRsp, error)
}

type routerClient struct {
	cc *grpc.ClientConn
}

func NewRouterClient(cc *grpc.ClientConn) RouterClient {
	return &routerClient{cc}
}

func (c *routerClient) GroupUp(ctx context.Context, in *GroupUpReq, opts ...grpc.CallOption) (*BaseRsp, error) {
	out := new(BaseRsp)
	err := grpc.Invoke(ctx, "/protoc.Router/GroupUp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) ServerUp(ctx context.Context, in *ServerUpReq, opts ...grpc.CallOption) (*BaseRsp, error) {
	out := new(BaseRsp)
	err := grpc.Invoke(ctx, "/protoc.Router/ServerUp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) Message(ctx context.Context, in *MessageReq, opts ...grpc.CallOption) (*BaseRsp, error) {
	out := new(BaseRsp)
	err := grpc.Invoke(ctx, "/protoc.Router/Message", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Router service

type RouterServer interface {
	GroupUp(context.Context, *GroupUpReq) (*BaseRsp, error)
	ServerUp(context.Context, *ServerUpReq) (*BaseRsp, error)
	Message(context.Context, *MessageReq) (*BaseRsp, error)
}

func RegisterRouterServer(s *grpc.Server, srv RouterServer) {
	s.RegisterService(&_Router_serviceDesc, srv)
}

func _Router_GroupUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupUpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).GroupUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoc.Router/GroupUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).GroupUp(ctx, req.(*GroupUpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_ServerUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerUpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).ServerUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoc.Router/ServerUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).ServerUp(ctx, req.(*ServerUpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_Message_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).Message(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoc.Router/Message",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).Message(ctx, req.(*MessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Router_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protoc.Router",
	HandlerType: (*RouterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GroupUp",
			Handler:    _Router_GroupUp_Handler,
		},
		{
			MethodName: "ServerUp",
			Handler:    _Router_ServerUp_Handler,
		},
		{
			MethodName: "Message",
			Handler:    _Router_Message_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("protoc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 294 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x92, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x49, 0x13, 0x12, 0x38, 0x10, 0xa0, 0x63, 0xb1, 0x18, 0x10, 0xca, 0xc4, 0x42, 0x85,
	0xc2, 0xc8, 0x04, 0x15, 0x45, 0x0c, 0x2c, 0xa6, 0x3c, 0x40, 0x68, 0x8e, 0x8a, 0x81, 0x3a, 0x9c,
	0x1d, 0x24, 0xde, 0x80, 0xc7, 0xe0, 0x51, 0x71, 0x6c, 0x27, 0x69, 0x51, 0x17, 0xa6, 0xdc, 0x9d,
	0xfd, 0xff, 0xf9, 0xee, 0x97, 0x61, 0xbf, 0x66, 0x65, 0xd4, 0x7c, 0xec, 0x3e, 0x98, 0xfa, 0x2e,
	0xbf, 0x86, 0xec, 0xb6, 0xd4, 0x24, 0x75, 0x8d, 0xa7, 0x00, 0x4f, 0xa6, 0x34, 0x8d, 0x9e, 0xa8,
	0x8a, 0x44, 0x74, 0x16, 0x9d, 0xc7, 0x12, 0x74, 0x3f, 0xc1, 0x23, 0x88, 0xef, 0x98, 0xc5, 0xc8,
	0x1e, 0xec, 0xca, 0x98, 0x98, 0xf3, 0x29, 0xc0, 0x3d, 0xab, 0xa6, 0x7e, 0xae, 0x25, 0x7d, 0xa0,
	0x80, 0xcc, 0x75, 0x0f, 0x55, 0x10, 0x67, 0x0b, 0xdf, 0x3a, 0x67, 0xe2, 0x4f, 0xe2, 0x9b, 0xaa,
	0xea, 0x0c, 0x40, 0xf7, 0x93, 0xfc, 0x3b, 0x02, 0x78, 0x24, 0xad, 0xcb, 0x05, 0xb5, 0x46, 0x07,
	0x30, 0xea, 0x3d, 0x46, 0x6f, 0x15, 0x22, 0x24, 0x53, 0x56, 0xef, 0x4e, 0x18, 0xcb, 0xe4, 0xd5,
	0xd6, 0xed, 0x9d, 0x99, 0x12, 0xb1, 0xbf, 0x63, 0xf7, 0xb1, 0x3f, 0x9f, 0xa8, 0xa5, 0xa1, 0xa5,
	0x11, 0x89, 0xf3, 0xcf, 0xe6, 0xbe, 0x6d, 0xd5, 0xb3, 0xaf, 0x9a, 0xc4, 0xb6, 0x1b, 0x27, 0xc6,
	0xd6, 0xab, 0xa8, 0xe9, 0x1a, 0x6a, 0x7e, 0x01, 0x7b, 0x1e, 0xd5, 0xef, 0xb4, 0x4e, 0x1e, 0xfd,
	0x25, 0x2f, 0x6c, 0x7c, 0x01, 0x1c, 0x2f, 0x87, 0x12, 0xc7, 0x21, 0xeb, 0x61, 0xa9, 0x93, 0xc3,
	0x6e, 0x16, 0xe2, 0xce, 0xb7, 0x8a, 0x9f, 0x08, 0x52, 0xa9, 0x1a, 0x43, 0xdc, 0x8a, 0x43, 0x92,
	0x83, 0x78, 0x88, 0x76, 0x83, 0x18, 0x0b, 0xd8, 0xe9, 0x40, 0xf1, 0xb8, 0x3b, 0x5e, 0x41, 0xdf,
	0xa4, 0xf9, 0x37, 0xe2, 0x8b, 0x7f, 0x26, 0x57, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb7, 0x5a,
	0x47, 0x92, 0x3d, 0x02, 0x00, 0x00,
}
