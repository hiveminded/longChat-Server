// Code generated by protoc-gen-go.
// source: generator.proto
// DO NOT EDIT!

/*
Package generator is a generated protocol buffer package.

It is generated from these files:
	generator.proto

It has these top-level messages:
	GenerateReq
	GenerateRsp
*/
package generator

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GenerateReq_IdType int32

const (
	GenerateReq_User         GenerateReq_IdType = 0
	GenerateReq_Group        GenerateReq_IdType = 1
	GenerateReq_UserMessage  GenerateReq_IdType = 2
	GenerateReq_GroupMessage GenerateReq_IdType = 3
)

var GenerateReq_IdType_name = map[int32]string{
	0: "User",
	1: "Group",
	2: "UserMessage",
	3: "GroupMessage",
}
var GenerateReq_IdType_value = map[string]int32{
	"User":         0,
	"Group":        1,
	"UserMessage":  2,
	"GroupMessage": 3,
}

func (x GenerateReq_IdType) String() string {
	return proto.EnumName(GenerateReq_IdType_name, int32(x))
}
func (GenerateReq_IdType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type GenerateReq struct {
	Type GenerateReq_IdType `protobuf:"varint,1,opt,name=Type,json=type,enum=generator.GenerateReq_IdType" json:"Type,omitempty"`
}

func (m *GenerateReq) Reset()                    { *m = GenerateReq{} }
func (m *GenerateReq) String() string            { return proto.CompactTextString(m) }
func (*GenerateReq) ProtoMessage()               {}
func (*GenerateReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GenerateRsp struct {
	Id int64 `protobuf:"varint,1,opt,name=Id,json=id" json:"Id,omitempty"`
}

func (m *GenerateRsp) Reset()                    { *m = GenerateRsp{} }
func (m *GenerateRsp) String() string            { return proto.CompactTextString(m) }
func (*GenerateRsp) ProtoMessage()               {}
func (*GenerateRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*GenerateReq)(nil), "generator.GenerateReq")
	proto.RegisterType((*GenerateRsp)(nil), "generator.GenerateRsp")
	proto.RegisterEnum("generator.GenerateReq_IdType", GenerateReq_IdType_name, GenerateReq_IdType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for IdGenerator service

type IdGeneratorClient interface {
	Generate(ctx context.Context, in *GenerateReq, opts ...grpc.CallOption) (*GenerateRsp, error)
}

type idGeneratorClient struct {
	cc *grpc.ClientConn
}

func NewIdGeneratorClient(cc *grpc.ClientConn) IdGeneratorClient {
	return &idGeneratorClient{cc}
}

func (c *idGeneratorClient) Generate(ctx context.Context, in *GenerateReq, opts ...grpc.CallOption) (*GenerateRsp, error) {
	out := new(GenerateRsp)
	err := grpc.Invoke(ctx, "/generator.IdGenerator/Generate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IdGenerator service

type IdGeneratorServer interface {
	Generate(context.Context, *GenerateReq) (*GenerateRsp, error)
}

func RegisterIdGeneratorServer(s *grpc.Server, srv IdGeneratorServer) {
	s.RegisterService(&_IdGenerator_serviceDesc, srv)
}

func _IdGenerator_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdGeneratorServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generator.IdGenerator/Generate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdGeneratorServer).Generate(ctx, req.(*GenerateReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _IdGenerator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "generator.IdGenerator",
	HandlerType: (*IdGeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Generate",
			Handler:    _IdGenerator_Generate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("generator.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 190 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0x4f, 0xcd, 0x4b,
	0x2d, 0x4a, 0x2c, 0xc9, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x0b, 0x28,
	0x35, 0x31, 0x72, 0x71, 0xbb, 0x43, 0x78, 0xa9, 0x41, 0xa9, 0x85, 0x42, 0x86, 0x5c, 0x2c, 0x21,
	0x95, 0x05, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x7c, 0x46, 0xb2, 0x7a, 0x08, 0xad, 0x48, 0xaa,
	0xf4, 0x3c, 0x53, 0x40, 0x8a, 0x82, 0x58, 0x4a, 0x80, 0xa4, 0x92, 0x03, 0x17, 0x1b, 0x84, 0x2f,
	0xc4, 0xc1, 0xc5, 0x12, 0x5a, 0x9c, 0x5a, 0x24, 0xc0, 0x20, 0xc4, 0xc9, 0xc5, 0xea, 0x5e, 0x94,
	0x5f, 0x5a, 0x20, 0xc0, 0x28, 0xc4, 0xcf, 0xc5, 0x0d, 0x12, 0xf4, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c,
	0x4f, 0x15, 0x60, 0x12, 0x12, 0xe0, 0xe2, 0x01, 0xcb, 0xc1, 0x44, 0x98, 0x95, 0x64, 0x91, 0xdc,
	0x50, 0x5c, 0x20, 0xc4, 0xc7, 0xc5, 0xe4, 0x99, 0x02, 0x76, 0x01, 0x73, 0x10, 0x53, 0x66, 0x8a,
	0x91, 0x37, 0x17, 0xb7, 0x67, 0x8a, 0x3b, 0xcc, 0x21, 0x42, 0x36, 0x5c, 0x1c, 0x30, 0xd5, 0x42,
	0x62, 0xd8, 0x1d, 0x28, 0x85, 0x55, 0xbc, 0xb8, 0x40, 0x89, 0x21, 0x89, 0x0d, 0x1c, 0x04, 0xc6,
	0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x18, 0x65, 0x81, 0xef, 0x15, 0x01, 0x00, 0x00,
}
